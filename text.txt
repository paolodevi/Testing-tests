function animate_mode_patch(Faces, V0, V1, f, scale, nCycles, nFramesPerCycle)
% animate_mode_patch  Animate an eigenmode using patch (independent figure)
%
% Usage:
%   animate_mode_patch(Faces, V0, V1, f, scale, nCycles, nFramesPerCycle)
%
% Inputs:
%   Faces  - connectivity matrix [nFaces x nNodesPerFace]
%   V0     - undeformed vertices [nNodes x 3]
%   V1     - deformed vertices [nNodes x 3]
%   f      - natural frequency (Hz)
%   scale  - deformation scale factor
%   nCycles - number of oscillation cycles to animate
%   nFramesPerCycle - number of frames per cycle

    %% === VALIDATION ===
    if nargin < 7, nFramesPerCycle = 100; end
    if nargin < 6, nCycles = 3; end
    if nargin < 5, scale = 5; end

    if isempty(Faces) || isempty(V0) || isempty(V1)
        error('Faces or Vertices are empty.');
    end

    %% === PREPARE ANIMATION ===
    omega = 2*pi*f;
    tCycle = 1/f;
    t = linspace(0, nCycles*tCycle, nFramesPerCycle*nCycles);
    dV = V1 - V0;

    %% === CREATE SEPARATE FIGURE & AXES ===
    animFig = figure('Name', sprintf('Mode %.2f Hz', f), ...
                     'Color', 'w', ...
                     'NumberTitle', 'off');
    animAx = axes('Parent', animFig, 'Projection', 'perspective');
    hold(animAx, 'on'); grid(animAx, 'on'); axis(animAx, 'equal');
    xlabel(animAx, 'X'); ylabel(animAx, 'Y'); zlabel(animAx, 'Z');
    title(animAx, sprintf('Mode Shape Animation (%.2f Hz)', f));

    % Define axis limits before animation
    allV = [V0; V1];
    axis(animAx, [min(allV(:,1)) max(allV(:,1)) ...
                  min(allV(:,2)) max(allV(:,2)) ...
                  min(allV(:,3)) max(allV(:,3))]);

    %% === INITIAL PATCH ===
    hPatch = patch(animAx, ...
        'Faces', Faces, ...
        'Vertices', V0, ...
        'FaceColor', [0.3 0.6 1], ...
        'EdgeColor', 'none', ...
        'FaceLighting', 'gouraud', ...
        'AmbientStrength', 0.3);

    camlight(animAx, 'headlight');
    material(animAx, 'shiny');
    view(animAx, 3);

    %% === ANIMATION LOOP ===
    for i = 1:length(t)
        if ~ishandle(animFig)
            % User closed the figure â†’ safely exit
            return;
        end
        phase = sin(omega * t(i));
        V = V0 + scale * dV * phase;
        set(hPatch, 'Vertices', V);
        drawnow limitrate;  % More efficient redraw
    end
end