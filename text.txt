function [imax, jmax] = explore_matrix(A, i_start, j_start)
% EXPLORE_MATRIX explores a binary matrix A starting from (i_start, j_start)
% and finds the furthest indices (imax, jmax) reached by iterative exploration.
%
% The exploration rules:
% - Start at (i_start, j_start) where A(i_start,j_start) == 1
% - From each current point, search:
%       * to the right (same row, increasing column)
%       * downward (same column, increasing row)
%   to find the next 1 in each direction.
% - Repeat for each newly found point until no new points are discovered.

    % Check input validity
    if A(i_start, j_start) ~= 1
        error('Starting point (i_start, j_start) must contain a 1.');
    end

    [nRows, nCols] = size(A);

    % Store visited points
    visited = false(nRows, nCols);
    visited(i_start, j_start) = true;

    % Queue of points to explore (each row = [i, j])
    toExplore = [i_start, j_start];

    % Initialize maximum indices
    imax = i_start;
    jmax = j_start;

    % Loop until no new points are found
    while ~isempty(toExplore)
        newPoints = [];
        for k = 1:size(toExplore, 1)
            i = toExplore(k, 1);
            j = toExplore(k, 2);

            % Search to the right (same row)
            next_j = find(A(i, j+1:end) == 1, 1, 'first');
            if ~isempty(next_j)
                next_j = j + next_j;
                if ~visited(i, next_j)
                    newPoints = [newPoints; i, next_j];
                    visited(i, next_j) = true;
                    jmax = max(jmax, next_j);
                end
            end

            % Search downward (same column)
            next_i = find(A(i+1:end, j) == 1, 1, 'first');
            if ~isempty(next_i)
                next_i = i + next_i;
                if ~visited(next_i, j)
                    newPoints = [newPoints; next_i, j];
                    visited(next_i, j) = true;
                    imax = max(imax, next_i);
                end
            end
        end

        % Continue exploring newly found points
        toExplore = newPoints;
    end
end