function groups = reviewCandidates(groups, k, files_ref, files_tgt, fps)
% Launch all candidate animations simultaneously.
% Each window has ✓/✗ controls that update groups(k).candidates live.

if nargin < 5, fps = 30; end
cand = groups(k).candidates;
[nI, nJ] = size(cand);

% Shared handle object so changes propagate to all windows
shared = struct();
shared.groups = groups;
shared.k = k;
shared.files_ref = files_ref;
shared.files_tgt = files_tgt;
shared.fps = fps;
shared.handles = gobjects(nI,nJ);  % to store figure handles

% Launch all candidate animations
for i = 1:nI
    for j = 1:nJ
        if cand(i,j)==1
            shared.handles(i,j) = launchAnimation(shared, i, j);
        end
    end
end

% Wait until all figures are closed
waitfor(findall(0, 'Type', 'figure', '-not', 'Tag', 'MATLAB_Hidden'));

% Retrieve modified structure
groups = shared.groups;

disp('All animations reviewed.');
end


%% ---------------------------------------------------------------
function fig = launchAnimation(shared, i, j)
% Launch one animation window for candidate (i,j)

k = shared.k;
fps = shared.fps;
files_ref = shared.files_ref;
files_tgt = shared.files_tgt;
groups = shared.groups;

% --- Load frames1 ---
frames1 = [];
for ii = 1:numel(files_ref)
    ref_str = strrep(num2str(round(groups(k).fr(i),2)), '.', '_');
    if contains(files_ref(ii).name, ref_str)
        S = load(fullfile(files_ref(ii).folder, files_ref(ii).name));
        frames1 = S.frames;
        break;
    end
end

% --- Load frames2 ---
frames2 = [];
for ii = 1:numel(files_tgt)
    tgt_str = strrep(num2str(round(groups(k).ft(j),2)), '.', '_');
    if contains(files_tgt(ii).name, tgt_str)
        S = load(fullfile(files_tgt(ii).folder, files_tgt(ii).name));
        frames2 = S.frames;
        break;
    end
end

if isempty(frames1) || isempty(frames2)
    warning('Missing frames for candidate (%d,%d)', i, j);
    fig = gobjects(0);
    return;
end

nFrames = min(length(frames1), length(frames2));
dt = 1 / fps;

fig = figure('Name', sprintf('Candidate (%d,%d)', i, j), ...
             'NumberTitle', 'off', 'Color', 'w', 'MenuBar', 'none', ...
             'UserData', true);

t = tiledlayout(fig, 2, 1, 'TileSpacing', 'compact', 'Padding', 'compact');

nexttile(t, 1);
h1 = imshow(frames1(1).cdata, 'Border', 'tight');
title(sprintf('Reference (%d)', i));

nexttile(t, 2);
h2 = imshow(frames2(1).cdata, 'Border', 'tight');
title(sprintf('Target (%d,%d)', i, j));

axis image off;

% ✓ button
uicontrol('Style', 'pushbutton', 'String', '✓', ...
    'ForegroundColor', 'green', 'FontSize', 20, ...
    'Units', 'normalized', 'Position', [0.82 0.6 0.15 0.15], ...
    'Callback', @(~,~) acceptCallback(shared, i, j));

% ✗ button
uicontrol('Style', 'pushbutton', 'String', 'X', ...
    'ForegroundColor', 'red', 'FontSize', 20, ...
    'Units', 'normalized', 'Position', [0.82 0.3 0.15 0.15], ...
    'Callback', @(~,~) rejectCallback(shared, i, j));

% Playback timer
timerObj = timer('ExecutionMode','fixedRate', 'Period', dt, ...
                 'TimerFcn',@(~,~) updateFrames());

start(timerObj);

% Nested function: playback update
kFrame = 1;
    function updateFrames()
        if ~ishandle(fig)
            stop(timerObj);
            delete(timerObj);
            return;
        end
        kFrame = mod(kFrame, nFrames) + 1;
        set(h1,'CData',frames1(kFrame).cdata);
        set(h2,'CData',frames2(kFrame).cdata);
        drawnow limitrate nocallbacks;
    end
end


%% ---------------------------------------------------------------
function acceptCallback(shared, i, j)
% Green ✓ pressed: accept candidate (i,j)
fprintf('Accepted candidate (%d,%d)\n', i, j);

k = shared.k;
groups = shared.groups;

% Zero entire row, then set (i,j)=1
groups(k).candidates(i, :) = 0;
groups(k).candidates(i, j) = 1;

% Close all other animations from this row
handles = shared.handles;
for jj = 1:size(handles,2)
    if isgraphics(handles(i,jj))
        try, close(handles(i,jj)); end
    end
end

shared.groups = groups;  % update shared state
end


function rejectCallback(shared, i, j)
% Red ✗ pressed: reject candidate (i,j)
fprintf('Rejected candidate (%d,%d)\n', i, j);

k = shared.k;
groups = shared.groups;
groups(k).candidates(i, j) = 0;
shared.groups = groups;

% Close only this window
handles = shared.handles;
if isgraphics(handles(i,j))
    try, close(handles(i,j)); end
end
end