% === animate_mode_patch.m ===
% Animate an eigenmode using patch (Faces + Vertices)

clear; clc; close all;

%% === USER INPUTS ===
f = 20;                % Natural frequency (Hz)
scale = 5;             % Visualization scale factor
nCycles = 3;           % Number of oscillation cycles
nFramesPerCycle = 100; % Frames per cycle

% === GEOMETRY ===
% Faces:   [nFaces x nNodesPerFace]
% Vertices: [nNodes x 3]
% Replace with your actual data:
Faces = [...];       % e.g., from your mesh connectivity
V0 = [...];          % Undeformed coordinates [x y z]
V1 = [...];          % Deformed coordinates [x y z] for one mode

%% === PREPARE ANIMATION ===
omega = 2*pi*f;      % Angular frequency [rad/s]
tCycle = 1/f;        % Period of oscillation
t = linspace(0, nCycles*tCycle, nFramesPerCycle*nCycles);

% Mode shape vector (deformation per node)
dV = V1 - V0;

%% === INITIALIZE FIGURE ===
figure('Color', 'w');
ax = axes('Projection','perspective');
hold on; grid on; axis equal;
xlabel('X'); ylabel('Y'); zlabel('Z');
title(sprintf('Eigenmode Animation (f = %.2f Hz)', f));

% Create the initial patch object
hPatch = patch('Faces', Faces, ...
               'Vertices', V0, ...
               'FaceColor', [0.3 0.6 1], ...
               'EdgeColor', 'none', ...
               'FaceLighting', 'gouraud', ...
               'AmbientStrength', 0.3);

% Add a light for realism
camlight headlight;
material shiny;

% Set initial view
view(3);

%% === ANIMATION LOOP ===
for i = 1:length(t)
    % Harmonic deformation at this time
    phase = sin(omega * t(i));
    V = V0 + scale * dV * phase;
    
    % Update patch vertices
    set(hPatch, 'Vertices', V);
    
    % Update title
    title(sprintf('Eigenmode Animation (t = %.3f s)', t(i)));
    
    drawnow;
end