% === animate_mode_patch_debug.m ===
clear; clc; close all;

%% === USER INPUTS ===
f = 20;                % Natural frequency (Hz)
scale = 5;             % Visualization scale factor
nCycles = 3;           % Number of oscillation cycles
nFramesPerCycle = 100; % Frames per cycle

% === GEOMETRY (replace with your data) ===
% Example minimal test shape (a small square)
% Uncomment this to test if your data fails
% Faces = [1 2 3 4];
% V0 = [0 0 0; 1 0 0; 1 1 0; 0 1 0];
% V1 = V0 + [0 0 0; 0 0 0.1; 0 0 0.1; 0 0 0];

% Your data here:
Faces = ...;   % e.g., [nFaces x 3 or 4]
V0 = ...;      % [nNodes x 3]
V1 = ...;      % [nNodes x 3]

%% === VALIDATION ===
if isempty(Faces) || isempty(V0)
    error('Faces or Vertices are empty. Check your input data.');
end
if size(V0,2) ~= 3
    error('Vertices must be an NÃ—3 array.');
end
if max(Faces(:)) > size(V0,1)
    error('Faces reference nonexistent vertex indices.');
end

%% === PREPARE ANIMATION ===
omega = 2*pi*f;
tCycle = 1/f;
t = linspace(0, nCycles*tCycle, nFramesPerCycle*nCycles);
dV = V1 - V0;

%% === INITIALIZE FIGURE ===
fig = figure('Color', 'w');
ax = axes('Parent', fig, 'Projection', 'perspective');
hold(ax, 'on'); grid(ax, 'on'); axis(ax, 'equal');
xlabel('X'); ylabel('Y'); zlabel('Z');
title(sprintf('Eigenmode (%.2f Hz)', f));

% Create patch
hPatch = patch('Faces', Faces, ...
               'Vertices', V0, ...
               'FaceColor', [0.3 0.6 1], ...
               'EdgeColor', 'k', ...          % add visible edges
               'FaceLighting', 'gouraud', ...
               'AmbientStrength', 0.5, ...
               'Parent', ax);

% Add light and view
camlight('headlight');
material('dull');
view(3);

% Set axis limits explicitly
allV = [V0; V1];
axis(ax, [min(allV(:,1)) max(allV(:,1)) ...
          min(allV(:,2)) max(allV(:,2)) ...
          min(allV(:,3)) max(allV(:,3))]);

%% === ANIMATION LOOP ===
for i = 1:length(t)
    phase = sin(omega*t(i));
    V = V0 + scale * dV * phase;
    set(hPatch, 'Vertices', V);
    drawnow;
end