% --- Load your experimental data ---
% Example: assume you have vectors t (time) and y (signal)
% Replace with your actual data
t = linspace(0,10,200); 
y = sin(2*pi*0.5*t) + 0.2*randn(size(t)); % synthetic test signal with noise

dt = mean(diff(t));   % average sampling interval
fs = 1/dt;            % sampling frequency

%% --- 1. Butterworth low-pass filter ---
fc = 0.8; % cutoff frequency in Hz (tune this!)
[b,a] = butter(4, fc/(fs/2), 'low');
y_butter = filtfilt(b, a, y);

%% --- 2. Savitzky-Golay filter ---
frame = 15;   % must be odd
order = 3;
y_sgolay = sgolayfilt(y, order, frame);

%% --- 3. Wavelet denoising ---
y_wavelet = wdenoise(y, 4); % 4 decomposition levels

%% --- 4. Moving average filter ---
window = 11;  % number of samples
y_movavg = movmean(y, window);

%% --- Plot comparison ---
figure;
plot(t, y, 'k--', 'DisplayName','Raw data'); hold on;
plot(t, y_butter, 'r-', 'LineWidth',1.5, 'DisplayName','Butterworth LPF');
plot(t, y_sgolay, 'b-', 'LineWidth',1.5, 'DisplayName','Savitzky-Golay');
plot(t, y_wavelet, 'm-', 'LineWidth',1.5, 'DisplayName','Wavelet denoise');
plot(t, y_movavg, 'g-', 'LineWidth',1.5, 'DisplayName','Moving average');

xlabel('Time'); ylabel('Signal');
title('Filtering Comparison');
legend('show'); grid on;