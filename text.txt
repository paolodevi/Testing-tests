function [MAC_out, fig] = plot_mac(MAC, freqPhi, freqPsi, namePhi, namePsi, showValues, correction)
% PLOT_MAC Visualize the MAC matrix as a heatmap with optional correction blending.

    if nargin < 7
        correction = [];
    end
    if nargin < 6 || isempty(showValues)
        showValues = false;
    end

    % Clean up inputs
    MAC(~any(MAC,2), :) = [];
    MAC(:, ~any(MAC,1)) = [];
    freqPhi(freqPhi == 0) = [];
    freqPsi(freqPsi == 0) = [];

    nPhi = size(MAC, 1);
    nPsi = size(MAC, 2);
    xx = 1:nPhi;
    yy = 1:nPsi;

    % Initialize figure
    fig = figure('Visible', 'on', 'Name', 'MAC Matrix Interactive');
    ax = axes('Parent', fig);
    hImg = imagesc(ax, yy, xx, MAC);
    colormap(parula);
    colorbar;
    caxis([0 1]);
    axis xy equal;
    ylabel([namePhi, ' modes frequency [Hz]']);
    xlabel([namePsi, ' modes frequency [Hz]']);
    title('MAC Matrix (interactive)');

    % Set frequency labels if available
    if ~isempty(freqPhi)
        yticks(1:nPhi);
        yticklabels(arrayfun(@(f) sprintf('%.2f',f), freqPhi, 'UniformOutput', false));
        ytickangle(45);
    end
    if ~isempty(freqPsi)
        xticks(1:nPsi);
        xticklabels(arrayfun(@(f) sprintf('%.2f',f), freqPsi, 'UniformOutput', false));
        xtickangle(45);
    end

    % Optional overlay of numeric values
    if showValues
        hold on;
        for i = 1:nPhi
            for j = 1:nPsi
                val = MAC(i,j);
                if val > 0.1
                    text(yy(j), xx(i), sprintf('%.2f', val), ...
                         'HorizontalAlignment', 'center', ...
                         'FontSize', 8, 'Color', 'w', 'FontWeight', 'bold');
                end
            end
        end
        hold off;
    end

    % --- Add slider if correction is provided ---
    alphaVal = 0; % initial blend factor
    if ~isempty(correction)
        uicontrol('Style', 'text', 'String', 'Blend (0=MAC, 1=Correction)', ...
                  'Units', 'normalized', 'Position', [0.25 0.02 0.5 0.04]);

        slider = uicontrol('Style', 'slider', 'Min', 0, 'Max', 1, 'Value', alphaVal, ...
                           'Units', 'normalized', 'Position', [0.25 0.0 0.5 0.03], ...
                           'Callback', @update_blend);
    end

    % Nested function to handle slider changes
    function update_blend(src, ~)
        alphaVal = src.Value;
        newMAC = (1 - alphaVal) * MAC + alphaVal * correction;
        set(hImg, 'CData', newMAC);
        drawnow;
    end

    % --- Wait for figure close ---
    uiwait(fig); % block until figure is closed

    % Return last combined matrix
    if isempty(correction)
        MAC_out = MAC;
    else
        MAC_out = (1 - alphaVal) * MAC + alphaVal * correction;
    end

end