%% Example data (replace with your own)
t = linspace(0,10,200);
y = sin(2*pi*0.5*t) + 0.2*randn(size(t)); % noisy sine
figure; plot(t,y,'k--'); title('Raw Signal'); grid on;

%% Define options
wavelets = {'db4','sym8','coif5'}; % test different wavelets
levels   = [2 4 6];                % decomposition levels
methods  = {'UniversalThreshold','MinimaxThreshold'};
rules    = {'Soft','Hard'};

%% Loop over all combinations
figure;
plotIdx = 1;
for w = 1:length(wavelets)
    for L = levels
        for m = 1:length(methods)
            for r = 1:length(rules)
                % Apply wavelet denoising
                y_denoised = wdenoise(y,L, ...
                    'Wavelet',wavelets{w}, ...
                    'DenoisingMethod',methods{m}, ...
                    'ThresholdRule',rules{r});
                
                % Plot result
                subplot(length(wavelets), length(levels), plotIdx);
                plot(t,y,'k--','DisplayName','Raw'); hold on;
                plot(t,y_denoised,'r','LineWidth',1.2,'DisplayName','Denoised');
                title(sprintf('%s | L=%d | %s-%s', ...
                    wavelets{w},L,methods{m}(1:3),rules{r}(1:1)));
                axis tight; grid on;
                plotIdx = plotIdx + 1;
            end
        end
    end
end

sgtitle('Wavelet Denoising Comparisons');